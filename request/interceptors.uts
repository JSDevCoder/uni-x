type Options = {
	status : number, // 1-请求成功 2-请求失败
	config : Map<string, any>,
	response : RequestSuccess<UTSJSONObject>,
	error : any
}

export class Midderware {
	options : Options
	useReqFn : () => Map<string, any>
	useResFn : () => UTSJSONObject
	constructor() {
		this.options = {
			status: 0,
			config: new Map<string, any>(),
			response: {
				statusCode: 200,
				data: null,
				header: {} as UTSJSONObject,
				cookies: []
			} as RequestSuccess<UTSJSONObject>,
			error: {
				errCode: 5,
				errSubject: '',
				data: {} as any,
				cause: new Error('系统出错'),
				errMsg: ''
			}
		} as Options
		
		this.useReqFn = () : Map<string, any> => {
			return new Map<string, any>()
		}

		this.useResFn = () : UTSJSONObject => {
			return {} as UTSJSONObject
		}
	}

	requestRun(fn : (config : Map<string, any>) => void) {
		this.useReqFn()
		fn(this.options.config)
	}
	
	responseRun(fn : (response : RequestSuccess<UTSJSONObject>) => void) {
		this.useResFn()
		fn(this.options.response)
	}

	requestUse(fn : (config : Map<string, any>) => Map<string, any>) {
		this.useReqFn = () : Map<string, any> => {
			return fn(this.options.config)
		}
	}
	
	responseUse(fn : (res : RequestSuccess<UTSJSONObject>) => UTSJSONObject) {
		this.useResFn = () : UTSJSONObject => {
			return fn(this.options.response)
		}
	}
}

export class RequestInterceptor extends Midderware {
	constructor() {
		super()
	}
}

export class ResponseInterceptor extends Midderware {
	constructor() {
		super()
	}
}