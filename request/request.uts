import { state, setData } from '../stores/index.uts'

// 回调函数类型
type Cb = (args : UTSJSONObject) => UTSJSONObject

/**
 * 封装uni.request
 */
class UtxRequest {
	// 请求对象
	requestTask : RequestTask | null = null
	
	// 请求结果
	reqResult: UTSJSONObject = {}

	// 默认请求参数
	defaultOpts : UTSJSONObject = {
		baseURL: '',
		api: '',
		method: 'GET',
		data: {} as UTSJSONObject | null,
		header: {}
	}

	/**
	 * 构造函数
	 */
	constructor(opts : UTSJSONObject) {
		const doMap = this.defaultOpts.toMap()
		const oMap = opts.toMap()
		oMap.forEach((v, k) => {
			if (doMap.has(k)) {
				this.defaultOpts.set(k, v)
			}
		})
	}

	/**
	 * 前置拦截
	 */
	beforeInterceptors(callback : Cb) {
		callback(this.defaultOpts)
	}
	
	/**
	 * 发送请求
	 */
	request(api : string, method : string, data : UTSJSONObject | null,) : Promise<UTSJSONObject> {
		const dData = this.defaultOpts.get('data') as UTSJSONObject
		data?.toMap()?.forEach((v, k) => {
			dData.set(k, v)
		})
		this.defaultOpts.set('api', api)
		this.defaultOpts.set('method', method)
		this.defaultOpts.set('data', dData)
		console.log(this.defaultOpts)
		return new Promise((resolve, reject) => {
			console.log('defaultOpts', this.defaultOpts)
			this.requestTask = uni.request({
				url: this.defaultOpts.getString('baseURL') + api,
				data: this.defaultOpts.getAny('data'),
				method: this.defaultOpts.getString('method'),
				success: res => {
					console.log('res', res)
					if (res.statusCode == 200) {
						let resData = res.data as UTSJSONObject
						console.log('resData', resData)
						let code = resData.getString('code') as string
						let msg = resData.getString('desc') as string
						if (code == '1000') {
							resolve(resData)
						} else {
							reject(resData)
							this.statusHandle(code, msg)
						}
					} else {
						this.statusHandle('0002', '服务端出错或资源不存在')
					}
				},
				fail: err => {
					console.log('err', err)
					reject(err)
					this.statusHandle('1005', '无效的请求，请检查')
				}
			})
		})
	}

	/**
	 * POST请求
	 */
	post(api : string, data : UTSJSONObject | null) : Promise<UTSJSONObject> {
		return this.request(api, 'POST', data)
	}

	/**
	 * GET请求
	 */
	getJSON(api : string, data : UTSJSONObject | null) : Promise<UTSJSONObject> {
		return this.request(api, 'GET', data)
	}

	/**
	 * 请求状态处理
	 */
	statusHandle(code : string, msg : string) {
		switch (code) {
			case '1001':
				uni.showToast({
					title: msg,
					icon: 'none',
					position: 'top'
				})
				break;
			case '1002':
				const attrs : UTSJSONObject = { hasLogin: false }
				setData(attrs)
				uni.reLaunch({
					url: '/pages/users/index'
				})
				break;
			case '0002':
				uni.showToast({
					title: msg,
					icon: 'none',
					position: 'top'
				})
				break;
			case '1005':
				uni.showToast({
					title: msg,
					icon: 'none',
					position: 'top'
				})
				break;
		}
	}
}

export default UtxRequest