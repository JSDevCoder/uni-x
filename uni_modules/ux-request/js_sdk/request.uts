import UxInterceptor from "./interceptors"
import { UxParam, UxRequestOptions, UxResponseFail } from "./types"

/**
 * 基于uni.request封装请求，带拦截器，支持uni-app x
 */
class UxRequest {
	/**
	 * 默认配置
	 */
	private options : UxRequestOptions = {
		url: '',
		baseURL: '',
		api: '',
		method: 'GET',
		data: {} as UTSJSONObject,
		header: {} as UTSJSONObject,
		timeout: 60000
	} as UxRequestOptions

	/**
	 * 拦截器实例数组
	 */
	private interceptors : UxInterceptor[] = []

	/**
	 * 请求实例
	 */
	private static instance : UxRequest | null = null

	/**
	 * requestTask
	 */
	requestTask : RequestTask | null = null

	/**
	 * 私有化构造函数，防止重复初始化UxRequest
	 */
	private constructor() { }

	/**
	 * 请求实例入口
	 * @return UxRequest
	 */
	static create() : UxRequest {
		const instance = UxRequest.instance
		if (instance == null) {
			UxRequest.instance = new UxRequest()
		}
		return UxRequest.instance as UxRequest
	}

	/**
	 * 添加拦截器实例
	 * @param interceptor 拦截器实例
	 */
	addInterceptor(interceptor : UxInterceptor) : void {
		this.interceptors.push(interceptor)
	}

	/**
	 * request请求方式
	 * @param param 请求参数
	 */
	request(param : UxParam) : Promise<UTSJSONObject> {
		this.options.api = param.api
		this.options.method = param.method
		this.options.data = param.data
		this.interceptors.forEach((interceptor) => {
			this.options = interceptor.beforeRequest(this.options)
		})
		return new Promise((resolve, reject) => {
			this.requestTask = uni.request<UTSJSONObject>({
				url: this.options.url as string,
				method: this.options.method,
				data: this.options.data,
				header: this.options.header,
				timeout: this.options.timeout,
				success: res => {
					if(res.statusCode == 200) {
						let response = res.data as UTSJSONObject
						this.interceptors.forEach(interceptor => {
							response = interceptor.afterResponseSucc(response)
						})
						resolve(response)
					} else {
						uni.showToast({
							title: '服务器状态码：' + res.statusCode,
							icon: 'none'
						})
					}
				},
				fail: err => {
					let error = {
						errCode: err.errCode,
						errMsg: err.errMsg
					} as UxResponseFail
					this.interceptors.forEach(interceptor => {
						error = interceptor.afterResponseFail(error)
					})
					reject(err)
				}
			} as RequestOptions<UTSJSONObject>) as RequestTask
		})
	}

	/**
	 * post请求方式
	 * @param api 请求接口
	 * @param data 请求参数
	 */
	post(api : string, data : UTSJSONObject | null) : Promise<UTSJSONObject> {
		return this.request({ api, method: 'POST', data } as UxParam)
	}

	/**
	 * get请求方式
	 * @param api 请求接口
	 * @param data 请求参数
	 */
	getData(api : string, data : UTSJSONObject | null) : Promise<UTSJSONObject> {
		return this.request({ api, method: 'GET', data } as UxParam)
	}

	/**
	 * 中断请求
	 */
	abort() {
		if (this.requestTask != null) {
			const task = this.requestTask as RequestTask
			task.abort()
		}
	}
}

export default UxRequest