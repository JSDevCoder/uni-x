type Options = {
	status : number, // 1-请求成功 2-请求失败
	config : Map<string, any>,
	response : RequestSuccess<UTSJSONObject>,
	error : string
}

export class Midderware {
	options : Options
	useReqFn : () => void
	useResFn : () => void
	constructor() {
		this.options = {
			status: 0,
			config: new Map<string, any>(),
			response: {
				statusCode: 200,
				data: null,
				header: {} as UTSJSONObject,
				cookies: []
			} as RequestSuccess<UTSJSONObject>,
			error: '请求出错，请稍后重试'
		} as Options

		this.useReqFn = () => {}

		this.useResFn = () => {}
	}

	requestRun(fn : (config : Map<string, any>) => void) {
		this.useReqFn()
		fn(this.options.config)
	}

	responseRun(fn : (response : RequestSuccess<UTSJSONObject>) => void) {
		this.useResFn()
		fn(this.options.response)
	}

	requestUse(fn : (config : Map<string, any>) => void) {
		this.useReqFn = () => {
			fn(this.options.config)
		}
	}

	responseUse(fn : (res : RequestSuccess<UTSJSONObject>) => void, eFn: (err: string) => void) {
		this.useResFn = () => {
			if(this.options.status == 1) {
				fn(this.options.response)
			}
			if(this.options.status == 2) {
				eFn(this.options.error)
			}
		}
	}
}

export class RequestInterceptor extends Midderware {
	constructor() {
		super()
	}
}

export class ResponseInterceptor extends Midderware {
	constructor() {
		super()
	}
}