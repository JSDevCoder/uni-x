<template>
	<text class="ux-text" :class="[theme]" :style="{fontSize: size + 'px'}" @tap="onClick">
		{{textHandle}}
	</text>
</template>

<script>
	import { useFormat } from '@/common/hooks/useFormat.uts'
	export default {
		props: {
			// 主题
			type: {
				type: String,
				default: ''
			},

			// 文本
			text: {
				type: String,
				default: '默认文本'
			},

			// 文本字体大小
			size: {
				type: Number,
				default: 14
			},

			// 模式，phone|date|name|link|price|prefixIcon|suffixIcon|lines
			mode: {
				type: String,
				default: ''
			},

			// 是否脱敏或格式化，对于日期为格式化
			encrypt: {
				type: Boolean,
				default: false
			},

			// 日期格式化模式
			pattem: {
				type: String,
				default: 'yyyy-mm-dd'
			},

			// 日期格式化时的分割符
			separator: {
				type: String,
				default: '/'
			}
		},

		computed: {
			// 主题色
			theme() : string {
				return `ux-text-${this.type}`
			},

			// 显示文字
			textHandle() : string {
				const format = useFormat()
				if (this.mode == 'phone' && this.encrypt == true) {
					return format.phoneFormat(this.text, 'encrypt')
				}
				if (this.mode == 'date') {
					if(this.encrypt == true) {
						return format.dateFormat(this.text, this.pattem, this.separator)
					}
					return this.text
				}

				if (this.mode == 'name' && this.encrypt == true) {
					return format.nameFormat(this.text, 'encrypt')
				}
				
				if(this.mode == 'price' && this.encrypt == true) {
					return format.priceFormat(this.text, this.pattem)
				}
				return this.text
			}
		},

		methods: {
			/**
			 * 点击文本内容
			 */
			onClick() {
				this.$emit('on-click')
			}
		}
	}
</script>

<style lang="scss" scoped>
	.ux-text {
		&.ux-text-primary {
			color: $ux-color-primary;
		}

		&.ux-text-success {
			color: $ux-color-success;
		}

		&.ux-text-info {
			color: $ux-color-info;
		}

		&.ux-text-warning {
			color: $ux-color-warning;
		}

		&.ux-text-error {
			color: $ux-color-error;
		}
	}
</style>