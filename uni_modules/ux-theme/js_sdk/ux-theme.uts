import { ColorSchema } from './color/type.uts'
import { TitleStyle, TextStyleSchema } from './text_style/type.uts'
import colors from './color/colors.uts'
import greenColors from './color/greenColors.uts'
import orangeColors from './color/orangeColors.uts'
import textStyles from './text_style/textStyles.uts'
import { reactive } from 'vue'
import { Theme, UxThemeAttr } from './types'

/**
 * 主题
 */
export default class UxTheme {
	uxThemeAttr : UxThemeAttr = reactive({
		// 将所有主题
		themes: [],

		// 默认主题中的主题色
		colors: colors,

		// 默认主题中的文本样式
		textStyles: textStyles,

		// 默认主题名
		currTheme: 'default'
	} as UxThemeAttr)

	private static instance : UxTheme | null = null

	private constructor() { }

	static getInstance() : UxTheme {
		const ins = UxTheme.instance
		if (ins == null) {
			UxTheme.instance = new UxTheme()
		}
		return UxTheme.instance as UxTheme
	}

	// 初始化主题
	init() {
		const themes = [{
			theme: 'default',
			colors: colors,
			textStyles: textStyles
		}, {
			theme: 'green',
			colors: greenColors,
			textStyles: textStyles
		}, {
			theme: 'orange',
			colors: orangeColors,
			textStyles: textStyles
		}] as Theme[]

		this.uxThemeAttr.themes = themes

		// 本地持久化缓存theme
		const localCurrTheme = uni.getStorageSync('currTheme') as string
		if (typeof localCurrTheme == 'string' && localCurrTheme != '') {
			const localThemes = uni.getStorageSync('themes')
			this.uxThemeAttr.themes = JSON.parse<Theme[]>(JSON.stringify(localThemes)) as Theme[]
			for (let i = 0; i < this.uxThemeAttr.themes.length; i++) {
				if (localCurrTheme == this.uxThemeAttr.themes[i]['theme']) {
					this.uxThemeAttr.currTheme = localCurrTheme
					this.uxThemeAttr.colors = this.uxThemeAttr.themes[i].colors
					this.uxThemeAttr.textStyles = this.uxThemeAttr.themes[i].textStyles
				}
			}
		}
	}

	// 判断是否已存在某个主题
	hasTheme(theme : string) : boolean {
		const len = this.uxThemeAttr.themes.length
		for (let i = 0; i < len; i++) {
			if (this.uxThemeAttr.themes[i]['theme'] == theme) {
				return true
			}
		}
		return false
	}

	// 拓展或者更新主题
	makeTheme(theme : string, colors : ColorSchema, textStyles : TextStyleSchema) {
		if (this.hasTheme(theme)) {
			const len = this.uxThemeAttr.themes.length
			for (let i = 0; i < len; i++) {
				if (theme == this.uxThemeAttr.themes[i]['theme']) {
					this.uxThemeAttr.themes[i].colors = colors
					this.uxThemeAttr.themes[i].textStyles = textStyles
				}
			}

		} else {
			this.uxThemeAttr.themes.push({
				theme,
				colors,
				textStyles
			} as Theme)
		}
		uni.setStorageSync('themes', this.uxThemeAttr.themes)
	}

	// 切换主题
	switchTheme(theme : string) : boolean {
		if (this.hasTheme(theme)) {
			this.uxThemeAttr.currTheme = theme
			const len = this.uxThemeAttr.themes.length
			for (let i = 0; i < len; i++) {
				if (theme == this.uxThemeAttr.themes[i]['theme']) {
					this.uxThemeAttr.currTheme = this.uxThemeAttr.themes[i].theme
					this.uxThemeAttr.colors = this.uxThemeAttr.themes[i].colors
					this.uxThemeAttr.textStyles = this.uxThemeAttr.themes[i].textStyles
					uni.setStorageSync('currTheme', this.uxThemeAttr.currTheme)
				}
			}
			return true
		}
		return false
	}

	// 获取主题颜色
	C(color : string) : string {
		return this.uxThemeAttr.colors[color] as string
	}

	// 获取主题文本样式
	T(style : string) : UTSJSONObject {
		let currTitleStyle = this.uxThemeAttr.textStyles[style] as TitleStyle
		return {
			fontSize: currTitleStyle['fontSize'] as string,
			fontWeight: currTitleStyle['fontWeight'] as number
		} as UTSJSONObject
	}
}