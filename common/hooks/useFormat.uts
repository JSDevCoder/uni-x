/**
 * Format 类型
 */
type Format = {
	/**
	 * 格式化处理手机号
	 * @param phone {String} 手机号
	 * @param pattem {String} 处理模式， encrypt-脱敏
	 * @returns {String} 处理后的手机号
	 */
	phoneFormat : (phone : string, pattem : string) => string

	/**
	 * 格式化处理日期
	 * @param date {String} 日期字符串
	 * @param pattem {String} 处理模式， yyyy-mm-dd|hh-mm-ss|yyyy-mm-dd hh-mm-ss
	 * @param sep {String} 日期时间分隔符
	 * @returns {String} 处理后的日期字符串
	 */
	dateFormat : (date : string, pattem : string, separator : string) => string

	/**
	 * 姓名脱敏格式化
	 * @param name {String} 姓名
	 * @param pattem {String} 处理模式 encrypt-脱敏
	 * @returns {String} 处理后的日期字符串
	 */
	nameFormat : (name : string, pattem : string) => string
	
	/**
	 * 格式化金额
	 * @param price {String} 金额
	 * @param pattem {String} 处理模式 dot-保留小数|format-格式化金额
	 * @returns {String} 处理后金额字符串
	 */
	priceFormat : (price : string, pattem : string) => string
}

/**
 * 数据格式化工具
 * @returns {Format} 返回Format类型的工具函数集合
 */
export function useFormat() : Format {
	/**
	 * 格式化处理手机号
	 * @param phone {String} 手机号
	 * @param pattem {String} 处理模式， encrypt-脱敏
	 * @returns {String} 处理后的手机号
	 */
	const phoneFormat = (phone : string, pattem : string) : string => {
		if (pattem == 'encrypt') {
			const start = phone.slice(0, 3)
			const end = phone.slice(7, 11)
			return `${start}****${end}`
		}
		return ''
	}

	/**
	 * 格式化处理日期
	 * @param date {String} 日期字符串
	 * @param pattem {String} 处理模式， yyyy-mm-dd|hh-mm-ss|yyyy-mm-dd hh-mm-ss
	 * @param separator {String} 日期时间分隔符
	 * @returns {String} 处理后的日期字符串
	 */
	const dateFormat = (date : string, pattem : string, separator : string) : string => {
		// 防止ios报错
		if (date.indexOf('-') != -1) {
			date = date.replace('-', '/')
		}
		const curr = new Date(date)
		const y = curr.getFullYear()
		const m = curr.getMonth() + 1
		const d = curr.getDate()
		const hh = curr.getHours()
		const mm = curr.getMinutes()
		const ss = curr.getSeconds()
		const check = (val : number) : string => {
			return val > 9 ? `${val}` : `0${val}`
		}
		if (pattem == 'yyyy-mm-dd') {
			return [y, check(m), check(d)].join(separator)
		}
		if (pattem == 'hh:mm:ss') {
			return [check(hh), check(mm), check(ss)].join(separator)
		}
		if (pattem == 'yyyy-mm-dd hh:mm:ss') {
			return [[check(hh), check(mm), check(ss)].join(separator), [check(hh), check(mm), check(ss)].join(':')].join(' ')
		}
		return date
	}

	/**
	 * 姓名脱敏格式化
	 * @param name {String} 姓名
	 * @param pattem {String} 处理模式 encrypt-脱敏
	 * @returns {String} 处理后的日期字符串
	 */
	const nameFormat = (name : string, pattem : string) : string => {
		const start = name.slice(0, 1)
		const end = name.slice(name.length - 1, name.length)
		if (pattem == 'encrypt') {
			if (name.length == 2) {
				return `${start}*`
			}
			if (name.length == 3) {
				return `${start}*${end}`
			}
			if (name.length > 3) {
				return `${start}**${end}`
			}
		}
		return name
	}
	
	/**
	 * 格式化金额
	 * @param price {String} 金额
	 * @param pattem {String} 处理模式 dot-保留小数|format-格式化金额
	 * @returns {String} 处理后金额字符串
	 */
	const priceFormat = (price : string, pattem : string) : string => {
		let toPrice = parseFloat(price)
		if (pattem == 'dot') {
			const arr = price.split('.')
			console.log(typeof arr[1])
			if (arr[1].length == 1) {
				return `${price}0`
			}
			if (arr[1].length == 2) {
				return price
			}
			if (arr[1].length > 2) {
				return `${arr[0]}.${arr[1].slice(0, 2)}`
			}
			return toPrice.toString()
		}
		if (pattem == 'format') {
			return toPrice.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')
		}
		return price
	}

	return {
		phoneFormat,
		dateFormat,
		nameFormat,
		priceFormat
	} as Format
}