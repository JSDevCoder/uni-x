<template>
	<view class="ux-touch" ref="ux-touch" @touchstart="onTouchStart" @touchmove="onTouchMove" @touchcancel="onTouchEnd">
		<slot></slot>
	</view>
</template>

<script>
	export default {
		name: "ux-touch",
		data() {
			return {
				startX: 0 as number,
				endX: 0 as number,
				startY: 0 as number,
				endY: 0 as number,
				moveX: 0 as number,
				moveY: 0 as number,
				width: 0 as number,
				height: 0 as number
			};
		},
		methods: {
			onTouchStart(e : TouchEvent) {
				const x = e.changedTouches[0].clientX
				const y = e.changedTouches[0].clientY
				console.log('start', x, y)
				this.startX = Math.floor(x)
				this.startY = Math.floor(y)
				const uxTouch = this.$refs['ux-touch'] as UniViewElement
				const w = uxTouch.getBoundingClientRect().width
				const h = uxTouch.getBoundingClientRect().height
				this.width = w
				this.height = h
			},
			onTouchMove(e : TouchEvent) {
				e.preventDefault()
				const x = e.changedTouches[0].clientX
				const y = e.changedTouches[0].clientY
				this.moveX = Math.floor(x)
				this.moveY = Math.floor(y)
				console.log('move', x, y)
				const uxTouch = this.$refs['ux-touch'] as UniViewElement
				if (this.startX > this.moveX) {
					console.log('向左')
					uxTouch.style.setProperty('left', Math.floor(-(this.startX - this.moveX)) + 'px')
				} else {
					console.log('向→')
					uxTouch.style.setProperty('left', Math.floor(this.moveX - this.startX) + 'px')
				}
				this.$emit('on-touch-move', { width: this.width, height: this.height, startX: this.startX, startY: this.startY, moveX: this.moveX, moveY: this.moveY })
			},
			onTouchEnd(e : TouchEvent) {
				const x = e.changedTouches[0].pageX
				const y = e.changedTouches[0].pageY
				console.log('end', x, y)
				this.endX = x
				this.endY = y
			}
		}
	}
</script>

<style>
	.ux-touch {
		transition: left .3s ease-out;
	}
</style>