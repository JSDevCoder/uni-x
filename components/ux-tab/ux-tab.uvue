<template>
	<view class="ux-tab" ref="ux-tab">
		<view class="ux-tab-head">
			<view class="ux-tab-head__item" :class="{active: current == index}"
				:style="{width: width / labels.length + 'rpx'}" v-for="(item, index) in labels" :key="index"
				@tap="activeTabItem(index)">
				<text class="ux-tab-head__item-text">{{item}}</text>
			</view>
		</view>
		<view class="ux-tab-body" ref="ux-tab-body" :style="{width: allWidth + 'rpx'}" :data-w="width"
			@touchstart="onTouchStart" @touchend="onTouchEnd" @touchmove="onTouchMove">
			<slot></slot>
		</view>
	</view>
</template>

<script>
	import { px2rpx } from '@/common/hooks/useSystem.uts'
	import { state } from './logic/state.uts';
	import { Point } from './types/index.uts'
	export default {
		name: "ux-tab",

		data() {
			return {
				labels: [] as string[],
				point: {
					startX: 0,
					startY: 0,
					moveX: 0,
					moveY: 0,
					initialPos: 0,
					isMove: false
				} as Point
			};
		},

		props: {
			// 选项卡每一项的宽度
			width: {
				type: Number,
				default: 750
			}
		},

		computed: {
			// 当前选中项
			current: () : number => state.current,

			// 总的选项卡宽度
			allWidth: () : number => this.width * this.labels.length
		},

		mounted() {
			// 生成labels数组，以及将选项高度转为rpx
			const uxTabBody = this.$refs['ux-tab-body'] as UniViewElement
			const labels : string[] = []
			setTimeout(() => {
				uxTabBody.children.forEach(v => {
					if (v.dataset.get('label') != null) {
						let label = v.dataset.get('label') as string
						labels.push(label)
						let h = v.getBoundingClientRect().height
						v.style.setProperty('height', px2rpx(h) + 'rpx')
					}
				})
				this.labels = labels
			}, 300)
		},

		methods: {
			/**
			 * TouchStart
			 * @param e {TouchEvent} touch事件对象
			 */
			onTouchStart(e : TouchEvent) {
				e.preventDefault()
				const touches = e.changedTouches[0]
				this.point.startX = touches.pageX
				this.point.startY = touches.pageY
				this.point.initialPos = state.current * -this.width
				this.point.isMove = true

			},

			/**
			 * TouchMove
			 * @param e {TouchEvent} touch事件对象
			 */
			onTouchMove(e : TouchEvent) {
				e.preventDefault()
				if (this.point.isMove != true) return
				const touches = e.touches[0]
				this.point.moveX = touches.pageX
				this.point.moveY = touches.pageY
			},

			/**
			 * TouchEnd
			 * @param e {TouchEvent} touch事件对象
			 */
			onTouchEnd() {
				const deltaX = this.point.moveX - this.point.startX
				const deltaY = this.point.moveY - this.point.startY
				this.point.isMove = false
				// 横向移动
				if (Math.abs(deltaX) > Math.abs(deltaY)) {
					if (deltaX < 0) {
						if (state.current >= this.labels.length - 1) return
						state.current += 1
					} else {
						if (state.current <= 0) return
						state.current -= 1
					}
					this.point.initialPos = -this.width * state.current
					const uxTabBody = this.$refs['ux-tab-body'] as UniViewElement
					uxTabBody.style.setProperty('transform', 'translateX(' + this.point.initialPos + 'rpx)')
				}
			},

			/**
			 * 点击tab每一项
			 * @param index {Number} 每一项的下标
			 */
			activeTabItem(index : number) {
				state.current = index
				const uxTabBody = this.$refs['ux-tab-body'] as UniViewElement
				uxTabBody.style.setProperty('transform', 'translateX(' + (state.current * -this.width) + 'rpx)')
				this.$emit('on-tab-click', index)
			}
		}
	}
</script>

<style lang="scss" scoped>
	.ux-tab {
		position: relative;
		min-height: 300rpx;

		&-head {
			height: 88rpx;
			display: flex;
			flex-direction: row;
			background-color: #fff;
			border-radius: 20rpx;

			&__item {

				&.active {
					background-color: #007aff;
					border-radius: 20rpx;
					transition: background-color border-radius .3s ease;
				}

				&-text {
					text-align: center;
					line-height: 88rpx;
				}
			}
		}

		&-body {
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			overflow: visible;
			transition: transform .4s;

			&__item {
				width: 710rpx;
				height: 600rpx;

				&.a {
					background-color: red;
				}

				&.b {
					background-color: blueviolet;
				}

				&.c {
					background-color: orangered;
				}

				&.d {
					background-color: cyan;
				}
			}
		}
	}
</style>